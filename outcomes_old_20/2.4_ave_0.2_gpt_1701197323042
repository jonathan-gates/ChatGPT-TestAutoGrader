GPT Answered: 
The compiler creates a default constructor when we do not define one in our class file - Correct
during compilation - Incorrect
When no parameters are set is when a default constructor is used. - Incorrect
When there are no arguments passed. - Incorrect
when there is not one already for a specific class - Incorrect
When it the programs compiles - Incorrect
when a constructor is not provided by the programmer of the class - Correct
In any class that does not explicitly include a constructor. - Correct
Before the main function of the code. - Incorrect
whenevery you dont specifiy your own - Correct
When non are provided - Correct
When no constructor exists when one is needed, a parameterless default constructor is declared. - Incorrect
The Compiler creates this automatically for you, unless you specifically create one. - Correct
In any class that doesn't explicitly include a constructor. - Correct
when no user-defined constructor exists - Correct
If a class does not explicitly include a constructor, the compiler creates one. - Correct
When you do not provide your own constructor. - Correct
C++ creates a default constructor during compilation if one is not provided. - Correct
The compiler will provide one when class does not explicitly include a constructor. - Correct
when the programmer does not explicitly include a constructor - Correct
When one is not explicitly stated. - Correct
when one is not explicitly included by a class - Correct
at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user - Incorrect

Expected: 
['correct', 'incorrect', 'incorrect', 'incorrect', 'correct', 'incorrect', 'correct', 'correct', 'incorrect', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct', 'correct']